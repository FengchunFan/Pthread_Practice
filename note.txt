Notes for Pthread

g++ -lpthread <filename>, -lpthread flag for compiler to link pthread libaray, potential linkage error if not included

key:  process flow can be scheduled to run on another processor thus gaining speed through parallel or distributed processing

Thread operations include thread creation, termination, synchronization (joins,blocking), scheduling, data management and process interaction.
A thread does not maintain a list of created threads, nor does it know the thread that created it.
All threads within a process share the same address space.
Threads in the same process share:
    Process instructions
    Most data
    open files (descriptors)
    signals and signal handlers
    current working directory
    User and group id
Each thread has a unique:
    Thread ID
    set of registers, stack pointer
    stack for local variables, return addresses
    signal mask
    priority
    Return value: errno
pthread functions return "0" if OK.

Thread's pthread_create() is cheaper to create and easier to manage compare to process's fork() subroutine

Pthread API: https://hpc-tutorials.llnl.gov/posix/pthreads_api/

Some important functions/calls for pthread program:
    0.  #include <stdio.h> 
        #include <stdlib.h>
        #include <pthread.h>
        g++ -lpthread <filename>
    1.  pthread_t <thread> //create pthread_t varaible, serve as thread identifier
    2.  int pthread_create(pthread_t * thread, //pointer to the pthread_t variable, add & to pass by reference
                       const pthread_attr_t * attr, //NULL for default attribute
                       void * (*start_routine)(void *), //pointer to the function to be threaded
                       void *arg); //pointer to argument of the function, send pointer to structure to pass multiple argument
                                   //can directly send arg (ex. (void*) a) or arg pointer (ex. (void*) &a) (in function use type* to extract)
        ex. int i = pthread_create( &thread1, NULL, print_message_function, (void*) message1);
    3.  int pthread_join(pthread_t thread, void **value_ptr); //execute PAUSE until thread is done
        ex. pthread_join( thread1, &result1); //second argument could be the return value from the function
    4.  void pthread_exit(void *retval); //anything after pthread_exit() will not be executed
                                         //By having main() explicitly call pthread_exit() as the last thing it does,
                                         //main() will block and be kept alive to support the threads it created until they are done.
        ex.pthread_exit(NULL) //equivalent to return 0
    5.  pthread_attr_init(attr) //used to initialize the thread attribute object
    6.  pthread_attr_destroy(attr) //used to destroy the thread attribute object
    7.  pthread_cancel(thread) //cancel another thread from thread


